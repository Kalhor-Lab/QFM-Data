if (temp >0) {print(paste(sampl, temp, unique(alldata_bysample[[sampl]][,1])[which(!unique(alldata_bysample[[sampl]][,1]) %in% alldata_bysample[[parent]][,1])], sep = ":   "))}
ext <- append(ext, temp)
}
names(ext) <- names(alldata_bysample)
sum(ext)
# Filter 1: Fixing the barcodes that have suffered deletion and have a close counterpart in the parental barcodes
all_barcodes -> all_barcodes_prefilter1
all_pairs -> all_pairs_prefilter1
allspacers_bybarcode -> allspacers_bybarcode_prefilter1
alldata_bysample  -> alldata_bysample_prefilter1
alldata_bybarcode_bysample -> alldata_bybarcode_bysample_prefilter1
hgRNA_length -> hgRNA_length_prefilter1
MaxLargeDelLength <- 10
for (bc in all_barcodes[!all_barcodes %in% alldata_bysample[[parent]][,1]]) {
if (hgRNA_length[bc] < MaxLargeDelLength) {                # If the calculated length suggests that the spacer could be a result of a large deletion
EcoRI_loc <- NULL; EcoRI_loc <- median(unlist(lapply(gregexpr(Post_bc_pattern, lapply(alldata_bybarcode_bysample[[bc]], "[", 1,2 )), min)))            # Calculates the position of the EcoRI site that comes right after the barcode. If this spacer has a large deletion, the EcoRI site should be seen.
if (EcoRI_loc > 5) {
bc_spacer_count <- NULL; bc_spacer_count <- max(unlist(lapply(lapply(alldata_bybarcode_bysample[[bc]], "[", 1,c(2,3) ), "[", 2)))                     # Want to choose the spacer that was observed the most for this barcode as reference, and this command extract its observed count
bc_spacer <- NULL; bc_spacer <- unlist(lapply(alldata_bybarcode_bysample[[bc]], "[", 1,c(2,3) ))[which(unlist(lapply(alldata_bybarcode_bysample[[bc]], "[", 1,c(2,3) )) == as.character(bc_spacer_count))-1]             # Extracting the reference spacer sequence based on the maximum count measured in the previous step. This is a really dirty way to do it.
barcode_distances <- NULL; barcode_distances <- stringdist.c(bc, unique(alldata_bysample[[parent]][,1]))        # Stores the distance of each parent barcode from the barcode at hand
spacer_distances <- NULL
for (bc2 in unique(alldata_bysample[[parent]][,1])) {
spacer_distances <- append(spacer_distances, stringdist.c(substr(bc_spacer, divergence_point, EcoRI_loc), substr(alldata_bybarcode_bysample[[bc2]][[parent]][1,2], divergence_point, EcoRI_loc) ))
}
overlap <- barcode_length + (EcoRI_loc - divergence_point + 1) - barcode_distances - spacer_distances               # It stores the total overlap between the current barcode with a parental barcode, including their spacers' divergent sequence regions.  It should be noted, that a base at the junction of truncated spacer barcode may be counted twice as overlap if it matches that particular point of both, but this is ok - perhaps even desirable - given the observatin that deletions often times happen between two bases of the same identity.
if (length(overlap[overlap == max(overlap)]) == 1) {                                #if there is only one reference barcode from the parent that has the maximum overlapwith the barcode and spacer at hand
reference_bc <- NULL; reference_bc <- unique(alldata_bysample[[parent]][,1])[which(overlap == max(overlap))]
if (max(overlap) > 6 ) {                                                    # and if the overlap is more than 7 bases in total.
### correct the barcode in all loaded data
print(paste("truncated barcode correction:", bc, reference_bc, max(overlap)))
all_barcodes <- all_barcodes[-which(all_barcodes == bc)]
for (pos in grep(bc, all_pairs)) { all_pairs[pos] <- paste(reference_bc, strsplit(all_pairs[pos], split = "-")[[1]][2] , sep = "-") }
allspacers_bybarcode[[reference_bc]] <- sort(append(allspacers_bybarcode[[reference_bc]], allspacers_bybarcode[[bc]]))
allspacers_bybarcode[[bc]] <- NULL
hgRNA_length <- hgRNA_length[-which(names(hgRNA_length) == bc)]
for(sampl in names(alldata_bybarcode_bysample[[bc]])) {
alldata_bysample[[sampl]][which(alldata_bysample[[sampl]][,1] == bc),1] <- reference_bc
alldata_bysample[[sampl]] <- alldata_bysample[[sampl]][order(alldata_bysample[[sampl]]$V1),]
alldata_bybarcode_bysample[[bc]][[sampl]][,1] <- reference_bc
alldata_bybarcode_bysample[[bc]][[sampl]][,ncol(alldata_bybarcode_bysample[[bc]][[sampl]])+1] <- bc
if(!is.null(alldata_bybarcode_bysample[[reference_bc]][[sampl]])) {
alldata_bybarcode_bysample[[reference_bc]][[sampl]][,ncol(alldata_bybarcode_bysample[[reference_bc]][[sampl]])+1] <- reference_bc
alldata_bybarcode_bysample[[reference_bc]][[sampl]] <- rbind(alldata_bybarcode_bysample[[reference_bc]][[sampl]], alldata_bybarcode_bysample[[bc]][[sampl]])        # For these samples the fifth column will be the original barcode
} else {
alldata_bybarcode_bysample[[reference_bc]][[sampl]] <- alldata_bybarcode_bysample[[bc]][[sampl]]
}
alldata_bybarcode_bysample[[bc]][[sampl]] <- NULL
alldata_bybarcode_bysample[[reference_bc]][[sampl]] <- alldata_bybarcode_bysample[[reference_bc]][[sampl]][order(alldata_bybarcode_bysample[[reference_bc]][[sampl]]$V3, decreasing = TRUE),]
alldata_bybarcode_bysample[[reference_bc]][[sampl]][,4] <-alldata_bybarcode_bysample[[reference_bc]][[sampl]][,3]/sum(alldata_bybarcode_bysample[[reference_bc]][[sampl]][,3]) * 100
}
}
}
}
}
}
# Filter 2: Fixing the barcodes that have suffered deletion and DO NOT have a close counterpart in the parental barcodes
all_barcodes -> all_barcodes_prefilter2
all_pairs -> all_pairs_prefilter2
allspacers_bybarcode -> allspacers_bybarcode_prefilter2
alldata_bysample  -> alldata_bysample_prefilter2
alldata_bybarcode_bysample -> alldata_bybarcode_bysample_prefilter2
hgRNA_length -> hgRNA_length_prefilter2
# separating non-parental barcodes and sorting them based on number of samples they are observed in, and extracting a consensus (most prevalent) spacer for them.
nonparental_barcodes <- all_barcodes[!all_barcodes %in% alldata_bysample[[parent]][,1]]
nonparental_barcode_dominance <- NULL;
nonparental_barcodes_spacers <- list();
for (bc in nonparental_barcodes) {
nonparental_barcode_dominance <- append(nonparental_barcode_dominance, length(names(alldata_bybarcode_bysample[[bc]])))
its_spacers <- NULL; its_spacers <- unlist(lapply(alldata_bybarcode_bysample[[bc]], "[", 1, 2))
nonparental_barcodes_spacers[[bc]] <- names(sort(table(its_spacers), decreasing = TRUE)[1])
}
nonparental_barcodes <- nonparental_barcodes[order(nonparental_barcode_dominance)]
for (bc in nonparental_barcodes) {
other_barcodes <- NULL; other_barcodes <- all_barcodes[!all_barcodes %in% alldata_bysample[[parent]][,1]];
other_barcodes <- other_barcodes[-which(other_barcodes == bc)]              # all non-parental barcodes with the barcode at hand removed
MaxLargeDelLength <- -1 - (median(unlist(lapply(gregexpr(TSS_pattern1, alldata_bysample[[parent]][,2]), min))))
if (hgRNA_length[bc] < MaxLargeDelLength) {                # If the calculated length suggests that the spacer could be a result of a large deletion
EcoRI_loc <- NULL; EcoRI_loc <- median(unlist(lapply(gregexpr(Post_bc_pattern, lapply(alldata_bybarcode_bysample[[bc]], "[", 1,2 )), min)))            # Calculates the position of the EcoRI site that comes right after the barcode. If this spacer has a large deletion, the EcoRI site should be seen.
if (EcoRI_loc > 5) {
bc_spacer_count <- NULL; bc_spacer_count <- max(unlist(lapply(lapply(alldata_bybarcode_bysample[[bc]], "[", 1,c(2,3) ), "[", 2)))                     # Want to choose the spacer that was observed the most for this barcode as reference, and this command extract its observed count
bc_spacer <- NULL; bc_spacer <- unlist(lapply(alldata_bybarcode_bysample[[bc]], "[", 1,c(2,3) ))[which(unlist(lapply(alldata_bybarcode_bysample[[bc]], "[", 1,c(2,3) )) == as.character(bc_spacer_count))-1]             # Extracting the reference spacer sequence based on the maximum count measured in the previous step. This is a really dirty way to do it.
barcode_distances <- NULL; barcode_distances <- stringdist.c(bc, other_barcodes)        # Stores the distance of each parent barcode from the barcode at hand
spacer_distances <- NULL
for (bc2 in other_barcodes) {
spacer_distances <- append(spacer_distances, stringdist.c(substr(bc_spacer, divergence_point, EcoRI_loc), substr(nonparental_barcodes_spacers[[bc2]], divergence_point, EcoRI_loc) ))
}
overlap <- barcode_length + (EcoRI_loc - divergence_point + 1) - barcode_distances - spacer_distances               # It stores the total overlap between the current barcode with a parental barcode, including their spacers' divergent sequence regions.  It should be noted, that a base at the junction of truncated spacer barcode may be counted twice as overlap if it matches that particular point of both, but this is ok - perhaps even desirable - given the observatin that deletions often times happen between two bases of the same identity.
if (length(overlap[overlap == max(overlap)]) == 1) {                                #if there is only one reference nonparental barcode that has the maximum overlapwith the barcode and spacer at hand
reference_bc <- NULL; reference_bc <- other_barcodes[which(overlap == max(overlap))]
if (max(overlap) > 6 ) {                                                    # and if the overlap is more than 7 bases in total.
### correct the barcode in all loaded data
print(paste("truncated barcode correction:", bc, reference_bc, max(overlap)))
all_barcodes <- all_barcodes[-which(all_barcodes == bc)]
for (pos in grep(bc, all_pairs)) { all_pairs[pos] <- paste(reference_bc, strsplit(all_pairs[pos], split = "-")[[1]][2] , sep = "-") }
allspacers_bybarcode[[reference_bc]] <- sort(append(allspacers_bybarcode[[reference_bc]], allspacers_bybarcode[[bc]]))
allspacers_bybarcode[[bc]] <- NULL
hgRNA_length <- hgRNA_length[-which(names(hgRNA_length) == bc)]
for(sampl in names(alldata_bybarcode_bysample[[bc]])) {
alldata_bysample[[sampl]][which(alldata_bysample[[sampl]][,1] == bc),1] <- reference_bc
alldata_bysample[[sampl]] <- alldata_bysample[[sampl]][order(alldata_bysample[[sampl]]$V1),]
alldata_bybarcode_bysample[[bc]][[sampl]][,1] <- reference_bc
alldata_bybarcode_bysample[[bc]][[sampl]][,ncol(alldata_bybarcode_bysample[[bc]][[sampl]])+1] <- bc
if(!is.null(alldata_bybarcode_bysample[[reference_bc]][[sampl]])) {
alldata_bybarcode_bysample[[reference_bc]][[sampl]][,ncol(alldata_bybarcode_bysample[[reference_bc]][[sampl]])+1] <- reference_bc
alldata_bybarcode_bysample[[reference_bc]][[sampl]] <- rbind(alldata_bybarcode_bysample[[reference_bc]][[sampl]], alldata_bybarcode_bysample[[bc]][[sampl]])        # For these samples the fifth column will be the original barcode
} else {
alldata_bybarcode_bysample[[reference_bc]][[sampl]] <- alldata_bybarcode_bysample[[bc]][[sampl]]
}
alldata_bybarcode_bysample[[bc]][[sampl]] <- NULL
alldata_bybarcode_bysample[[reference_bc]][[sampl]] <- alldata_bybarcode_bysample[[reference_bc]][[sampl]][order(alldata_bybarcode_bysample[[reference_bc]][[sampl]]$V3, decreasing = TRUE),]
alldata_bybarcode_bysample[[reference_bc]][[sampl]][,4] <-alldata_bybarcode_bysample[[reference_bc]][[sampl]][,3]/sum(alldata_bybarcode_bysample[[reference_bc]][[sampl]][,3]) * 100
}
}
}
}
}
}
# Filter 3: manual fixing
if (TRUE) {
hgRNA_length["TAACTGCTCT"] <- 35; print("Manually changed the calculated hgRNA length for TAACTGCTCT")
# 'AAGCCCATTC' is derived from AAGCCGCGCG based on manual check but is fixed automatically by Filter 1
# 'ACCACTGCGC' is derived from ACCACTGCTG aased on manual check but is fixed automatically by Filter 1
# 'CATTGGAGCA' is derived from CATTGGAGGT ased on manual check but is fixed automatically by Filter 1
# 'CTGCTATCGG' is derived from CTGCTATCGA ased on manual check but is fixed automatically by Filter 1
# 'GTGGACGGGA' is derived from GTGGAGCCTC ased on manual check but is fixed automatically by Filter 1
# 'CGACTCGGTG' is derived from CATTGGAGGT
# 'AGTCCAGACC' almost certainly derived from AGTCTGCCTC
# 'GAATTTAAAT' most likely is derived from GATACCCCCA
# 'GATACTTAAC' most likely is derived from GATACCCCCA
# 'GTGGAGCTAG' has a massive inversion in its sequence, extending from near spacer's beginning to near scaffold's end and is likely derived from GTGGAGCCTC.
# 'CGTATGTTTC' is possibly from CGTAGGGCCC
# 'ACACCGGTGT' is not spurious, but I cannot determine which barcode it is derived from. However, since it is only seen in one sample, it shouldn't alter the results significantly.
# 'ACCTCTAAAT' is derived from CGTAGGGCCC but a deletion has remove all the identifier.
# 'CCAGAACACC' is derived from CCCAAAACAC but a deletion has remove almost all the identifier.
all_barcodes -> all_barcodes_prefilter3
all_pairs -> all_pairs_prefilter3
allspacers_bybarcode -> allspacers_bybarcode_prefilter3
alldata_bysample  -> alldata_bysample_prefilter3
alldata_bybarcode_bysample -> alldata_bybarcode_bysample_prefilter3
hgRNA_length -> hgRNA_length_prefilter3
### correct the manually curated truncated barcodes in all loaded data
trunc_barcodes <- c('CGACTCGGTG', 'AGTCCAGACC', 'GAATTTAAAT', 'GATACTTAAC', 'GTGGAGCTAG', 'CGTATGTTTC', 'ACCTCTAAAT', 'CCAGAACACC', 'ATGTAATCCA')
trunc_barcodes_refs <- c('CATTGGAGGT', 'AGTCTGCCTC', 'GATACCCCCA', 'GATACCCCCA', 'GTGGAGCCTC', 'CGTAGGGCCC', 'CGTAGGGCCC', 'CCCAAAACAC', 'CCCAAAACAC')
for(i in 1:length(trunc_barcodes)) {
bc <- reference_bc <- NULL
bc <- trunc_barcodes[i]
reference_bc <- trunc_barcodes_refs[i]
### correct the barcode in all loaded data
print(paste("truncated barcode MANUAL correction (Filter 3):", bc, reference_bc))
all_barcodes <- all_barcodes[-which(all_barcodes == bc)]
for (pos in grep(bc, all_pairs)) { all_pairs[pos] <- paste(reference_bc, strsplit(all_pairs[pos], split = "-")[[1]][2] , sep = "-") }
allspacers_bybarcode[[reference_bc]] <- sort(append(allspacers_bybarcode[[reference_bc]], allspacers_bybarcode[[bc]]))
allspacers_bybarcode[[bc]] <- NULL
hgRNA_length <- hgRNA_length[-which(names(hgRNA_length) == bc)]
for(sampl in names(alldata_bybarcode_bysample[[bc]])) {
alldata_bysample[[sampl]][which(alldata_bysample[[sampl]][,1] == bc),1] <- reference_bc
alldata_bysample[[sampl]] <- alldata_bysample[[sampl]][order(alldata_bysample[[sampl]]$V1),]
alldata_bybarcode_bysample[[bc]][[sampl]][,1] <- reference_bc
alldata_bybarcode_bysample[[bc]][[sampl]][,ncol(alldata_bybarcode_bysample[[bc]][[sampl]])+1] <- bc
if(!is.null(alldata_bybarcode_bysample[[reference_bc]][[sampl]])) {
alldata_bybarcode_bysample[[reference_bc]][[sampl]][,ncol(alldata_bybarcode_bysample[[reference_bc]][[sampl]])+1] <- reference_bc
if ( ncol(alldata_bybarcode_bysample[[reference_bc]][[sampl]]) > ncol(alldata_bybarcode_bysample[[bc]][[sampl]]) ) {alldata_bybarcode_bysample[[bc]][[sampl]][,ncol(alldata_bybarcode_bysample[[bc]][[sampl]])+1] <- reference_bc}
alldata_bybarcode_bysample[[reference_bc]][[sampl]] <- rbind(alldata_bybarcode_bysample[[reference_bc]][[sampl]], alldata_bybarcode_bysample[[bc]][[sampl]])        # For these samples the fifth column will be the original barcode
} else {
alldata_bybarcode_bysample[[reference_bc]][[sampl]] <- alldata_bybarcode_bysample[[bc]][[sampl]]
}
alldata_bybarcode_bysample[[bc]][[sampl]] <- NULL
alldata_bybarcode_bysample[[reference_bc]][[sampl]] <- alldata_bybarcode_bysample[[reference_bc]][[sampl]][order(alldata_bybarcode_bysample[[reference_bc]][[sampl]]$V3, decreasing = TRUE),]
alldata_bybarcode_bysample[[reference_bc]][[sampl]][,4] <-alldata_bybarcode_bysample[[reference_bc]][[sampl]][,3]/sum(alldata_bybarcode_bysample[[reference_bc]][[sampl]][,3]) * 100
}
}
}
ext <- NULL;
for(sampl in names(alldata_bysample))  {
temp <- length(which(!unique(alldata_bysample[[sampl]][,1]) %in% alldata_bysample[[parent]][,1]));
if (temp >0) {print(paste(sampl, temp, unique(alldata_bysample[[sampl]][,1])[which(!unique(alldata_bysample[[sampl]][,1]) %in% alldata_bysample[[parent]][,1])], sep = ":   "))}
ext <- append(ext, temp)
}
names(ext) <- names(alldata_bysample)
alldata_bybarcode_bysample[["CCTGCAGGAA"]]
alldata_bysample[["170905-emb1-w2-JZ-rep2"]]
alldata_bysample[["170905-emb1-w2-JZ-rep1"]]
alldata_bybarcode_bysample[["CCTGCAGGAA"]]
all_barcodes <- all_barcodes_prefilter1
all_pairs <- all_pairs_prefilter1
allspacers_bybarcode <- allspacers_bybarcode_prefilter1
alldata_bysample  <- alldata_bysample_prefilter1
alldata_bybarcode_bysample <- alldata_bybarcode_bysample_prefilter1
hgRNA_length <- hgRNA_length_prefilter1
## Fixing the barcodes that have suffered a large deletion which has taken out most of the scaffold
# Custom string.dist function for 5' aligned measurement of distance based on hamming. First mis-match, will be the end of agreement between the strings.
stringdist.c <- function (a, b) {
a <- as.character(a)
b <- as.character(b)
if (length(a) == 0 || length(b) == 0) {
return(numeric(0))
}
if (max(length(a), length(b))%%min(length(a), length(b)) != 0) {
warning(RECYCLEWARNING)
}
a_split <- unlist(strsplit(a, ''));
b_split <- strsplit(b,'');
all_distance <- NULL
for (b1 in 1:length(b_split)) {
if (length(a_split) != length(b_split[[b1]])) {warning("a and b have to be the same length") }
d1 <- a_split == b_split[[b1]]
d2 <- length(a_split);
for (identity in d1) {
if(identity) {d2 <- d2 - 1 }
else {break;}
}
all_distance <- append(all_distance, d2);
}
all_distance
}
# Filter 1: Fixing the barcodes that have suffered deletion and have a close counterpart in the parental barcodes
all_barcodes -> all_barcodes_prefilter1
all_pairs -> all_pairs_prefilter1
allspacers_bybarcode -> allspacers_bybarcode_prefilter1
alldata_bysample  -> alldata_bysample_prefilter1
alldata_bybarcode_bysample -> alldata_bybarcode_bysample_prefilter1
hgRNA_length -> hgRNA_length_prefilter1
MaxLargeDelLength <- 10
for (bc in all_barcodes[!all_barcodes %in% alldata_bysample[[parent]][,1]]) {
if (hgRNA_length[bc] < MaxLargeDelLength) {                # If the calculated length suggests that the spacer could be a result of a large deletion
EcoRI_loc <- NULL; EcoRI_loc <- median(unlist(lapply(gregexpr(Post_bc_pattern, lapply(alldata_bybarcode_bysample[[bc]], "[", 1,2 )), min)))            # Calculates the position of the EcoRI site that comes right after the barcode. If this spacer has a large deletion, the EcoRI site should be seen.
if (EcoRI_loc > 5) {
bc_spacer_count <- NULL; bc_spacer_count <- max(unlist(lapply(lapply(alldata_bybarcode_bysample[[bc]], "[", 1,c(2,3) ), "[", 2)))                     # Want to choose the spacer that was observed the most for this barcode as reference, and this command extract its observed count
bc_spacer <- NULL; bc_spacer <- unlist(lapply(alldata_bybarcode_bysample[[bc]], "[", 1,c(2,3) ))[which(unlist(lapply(alldata_bybarcode_bysample[[bc]], "[", 1,c(2,3) )) == as.character(bc_spacer_count))-1]             # Extracting the reference spacer sequence based on the maximum count measured in the previous step. This is a really dirty way to do it.
barcode_distances <- NULL; barcode_distances <- stringdist.c(bc, unique(alldata_bysample[[parent]][,1]))        # Stores the distance of each parent barcode from the barcode at hand
spacer_distances <- NULL
for (bc2 in unique(alldata_bysample[[parent]][,1])) {
spacer_distances <- append(spacer_distances, stringdist.c(substr(bc_spacer, divergence_point, EcoRI_loc), substr(alldata_bybarcode_bysample[[bc2]][[parent]][1,2], divergence_point, EcoRI_loc) ))
}
overlap <- barcode_length + (EcoRI_loc - divergence_point + 1) - barcode_distances - spacer_distances               # It stores the total overlap between the current barcode with a parental barcode, including their spacers' divergent sequence regions.  It should be noted, that a base at the junction of truncated spacer barcode may be counted twice as overlap if it matches that particular point of both, but this is ok - perhaps even desirable - given the observatin that deletions often times happen between two bases of the same identity.
if (length(overlap[overlap == max(overlap)]) == 1) {                                #if there is only one reference barcode from the parent that has the maximum overlapwith the barcode and spacer at hand
reference_bc <- NULL; reference_bc <- unique(alldata_bysample[[parent]][,1])[which(overlap == max(overlap))]
if (max(overlap) > 6 ) {                                                    # and if the overlap is more than 7 bases in total.
### correct the barcode in all loaded data
print(paste("truncated barcode correction:", bc, reference_bc, max(overlap)))
all_barcodes <- all_barcodes[-which(all_barcodes == bc)]
for (pos in grep(bc, all_pairs)) { all_pairs[pos] <- paste(reference_bc, strsplit(all_pairs[pos], split = "-")[[1]][2] , sep = "-") }
allspacers_bybarcode[[reference_bc]] <- sort(append(allspacers_bybarcode[[reference_bc]], allspacers_bybarcode[[bc]]))
allspacers_bybarcode[[bc]] <- NULL
hgRNA_length <- hgRNA_length[-which(names(hgRNA_length) == bc)]
for(sampl in names(alldata_bybarcode_bysample[[bc]])) {
alldata_bysample[[sampl]][which(alldata_bysample[[sampl]][,1] == bc),1] <- reference_bc
alldata_bysample[[sampl]] <- alldata_bysample[[sampl]][order(alldata_bysample[[sampl]]$V1),]
alldata_bybarcode_bysample[[bc]][[sampl]][,1] <- reference_bc
alldata_bybarcode_bysample[[bc]][[sampl]][,ncol(alldata_bybarcode_bysample[[bc]][[sampl]])+1] <- bc
if(!is.null(alldata_bybarcode_bysample[[reference_bc]][[sampl]])) {
alldata_bybarcode_bysample[[reference_bc]][[sampl]][,ncol(alldata_bybarcode_bysample[[reference_bc]][[sampl]])+1] <- reference_bc
alldata_bybarcode_bysample[[reference_bc]][[sampl]] <- rbind(alldata_bybarcode_bysample[[reference_bc]][[sampl]], alldata_bybarcode_bysample[[bc]][[sampl]])        # For these samples the fifth column will be the original barcode
} else {
alldata_bybarcode_bysample[[reference_bc]][[sampl]] <- alldata_bybarcode_bysample[[bc]][[sampl]]
}
alldata_bybarcode_bysample[[bc]][[sampl]] <- NULL
alldata_bybarcode_bysample[[reference_bc]][[sampl]] <- alldata_bybarcode_bysample[[reference_bc]][[sampl]][order(alldata_bybarcode_bysample[[reference_bc]][[sampl]]$V3, decreasing = TRUE),]
alldata_bybarcode_bysample[[reference_bc]][[sampl]][,4] <-alldata_bybarcode_bysample[[reference_bc]][[sampl]][,3]/sum(alldata_bybarcode_bysample[[reference_bc]][[sampl]][,3]) * 100
}
}
}
}
}
}
# Filter 2: Fixing the barcodes that have suffered deletion and DO NOT have a close counterpart in the parental barcodes
all_barcodes -> all_barcodes_prefilter2
all_pairs -> all_pairs_prefilter2
allspacers_bybarcode -> allspacers_bybarcode_prefilter2
alldata_bysample  -> alldata_bysample_prefilter2
alldata_bybarcode_bysample -> alldata_bybarcode_bysample_prefilter2
hgRNA_length -> hgRNA_length_prefilter2
# separating non-parental barcodes and sorting them based on number of samples they are observed in, and extracting a consensus (most prevalent) spacer for them.
nonparental_barcodes <- all_barcodes[!all_barcodes %in% alldata_bysample[[parent]][,1]]
nonparental_barcode_dominance <- NULL;
nonparental_barcodes_spacers <- list();
for (bc in nonparental_barcodes) {
nonparental_barcode_dominance <- append(nonparental_barcode_dominance, length(names(alldata_bybarcode_bysample[[bc]])))
its_spacers <- NULL; its_spacers <- unlist(lapply(alldata_bybarcode_bysample[[bc]], "[", 1, 2))
nonparental_barcodes_spacers[[bc]] <- names(sort(table(its_spacers), decreasing = TRUE)[1])
}
nonparental_barcodes <- nonparental_barcodes[order(nonparental_barcode_dominance)]
for (bc in nonparental_barcodes) {
other_barcodes <- NULL; other_barcodes <- all_barcodes[!all_barcodes %in% alldata_bysample[[parent]][,1]];
other_barcodes <- other_barcodes[-which(other_barcodes == bc)]              # all non-parental barcodes with the barcode at hand removed
MaxLargeDelLength <- -1 - (median(unlist(lapply(gregexpr(TSS_pattern1, alldata_bysample[[parent]][,2]), min))))
if (hgRNA_length[bc] < MaxLargeDelLength) {                # If the calculated length suggests that the spacer could be a result of a large deletion
EcoRI_loc <- NULL; EcoRI_loc <- median(unlist(lapply(gregexpr(Post_bc_pattern, lapply(alldata_bybarcode_bysample[[bc]], "[", 1,2 )), min)))            # Calculates the position of the EcoRI site that comes right after the barcode. If this spacer has a large deletion, the EcoRI site should be seen.
if (EcoRI_loc > 5) {
bc_spacer_count <- NULL; bc_spacer_count <- max(unlist(lapply(lapply(alldata_bybarcode_bysample[[bc]], "[", 1,c(2,3) ), "[", 2)))                     # Want to choose the spacer that was observed the most for this barcode as reference, and this command extract its observed count
bc_spacer <- NULL; bc_spacer <- unlist(lapply(alldata_bybarcode_bysample[[bc]], "[", 1,c(2,3) ))[which(unlist(lapply(alldata_bybarcode_bysample[[bc]], "[", 1,c(2,3) )) == as.character(bc_spacer_count))-1]             # Extracting the reference spacer sequence based on the maximum count measured in the previous step. This is a really dirty way to do it.
barcode_distances <- NULL; barcode_distances <- stringdist.c(bc, other_barcodes)        # Stores the distance of each parent barcode from the barcode at hand
spacer_distances <- NULL
for (bc2 in other_barcodes) {
spacer_distances <- append(spacer_distances, stringdist.c(substr(bc_spacer, divergence_point, EcoRI_loc), substr(nonparental_barcodes_spacers[[bc2]], divergence_point, EcoRI_loc) ))
}
overlap <- barcode_length + (EcoRI_loc - divergence_point + 1) - barcode_distances - spacer_distances               # It stores the total overlap between the current barcode with a parental barcode, including their spacers' divergent sequence regions.  It should be noted, that a base at the junction of truncated spacer barcode may be counted twice as overlap if it matches that particular point of both, but this is ok - perhaps even desirable - given the observatin that deletions often times happen between two bases of the same identity.
if (length(overlap[overlap == max(overlap)]) == 1) {                                #if there is only one reference nonparental barcode that has the maximum overlapwith the barcode and spacer at hand
reference_bc <- NULL; reference_bc <- other_barcodes[which(overlap == max(overlap))]
if (max(overlap) > 6 ) {                                                    # and if the overlap is more than 7 bases in total.
### correct the barcode in all loaded data
print(paste("truncated barcode correction:", bc, reference_bc, max(overlap)))
all_barcodes <- all_barcodes[-which(all_barcodes == bc)]
for (pos in grep(bc, all_pairs)) { all_pairs[pos] <- paste(reference_bc, strsplit(all_pairs[pos], split = "-")[[1]][2] , sep = "-") }
allspacers_bybarcode[[reference_bc]] <- sort(append(allspacers_bybarcode[[reference_bc]], allspacers_bybarcode[[bc]]))
allspacers_bybarcode[[bc]] <- NULL
hgRNA_length <- hgRNA_length[-which(names(hgRNA_length) == bc)]
for(sampl in names(alldata_bybarcode_bysample[[bc]])) {
alldata_bysample[[sampl]][which(alldata_bysample[[sampl]][,1] == bc),1] <- reference_bc
alldata_bysample[[sampl]] <- alldata_bysample[[sampl]][order(alldata_bysample[[sampl]]$V1),]
alldata_bybarcode_bysample[[bc]][[sampl]][,1] <- reference_bc
alldata_bybarcode_bysample[[bc]][[sampl]][,ncol(alldata_bybarcode_bysample[[bc]][[sampl]])+1] <- bc
if(!is.null(alldata_bybarcode_bysample[[reference_bc]][[sampl]])) {
alldata_bybarcode_bysample[[reference_bc]][[sampl]][,ncol(alldata_bybarcode_bysample[[reference_bc]][[sampl]])+1] <- reference_bc
alldata_bybarcode_bysample[[reference_bc]][[sampl]] <- rbind(alldata_bybarcode_bysample[[reference_bc]][[sampl]], alldata_bybarcode_bysample[[bc]][[sampl]])        # For these samples the fifth column will be the original barcode
} else {
alldata_bybarcode_bysample[[reference_bc]][[sampl]] <- alldata_bybarcode_bysample[[bc]][[sampl]]
}
alldata_bybarcode_bysample[[bc]][[sampl]] <- NULL
alldata_bybarcode_bysample[[reference_bc]][[sampl]] <- alldata_bybarcode_bysample[[reference_bc]][[sampl]][order(alldata_bybarcode_bysample[[reference_bc]][[sampl]]$V3, decreasing = TRUE),]
alldata_bybarcode_bysample[[reference_bc]][[sampl]][,4] <-alldata_bybarcode_bysample[[reference_bc]][[sampl]][,3]/sum(alldata_bybarcode_bysample[[reference_bc]][[sampl]][,3]) * 100
}
}
}
}
}
}
# Filter 3: manual fixing
if (TRUE) {
hgRNA_length["TAACTGCTCT"] <- 35; print("Manually changed the calculated hgRNA length for TAACTGCTCT")
# 'AAGCCCATTC' is derived from AAGCCGCGCG based on manual check but is fixed automatically by Filter 1
# 'ACCACTGCGC' is derived from ACCACTGCTG aased on manual check but is fixed automatically by Filter 1
# 'CATTGGAGCA' is derived from CATTGGAGGT ased on manual check but is fixed automatically by Filter 1
# 'CTGCTATCGG' is derived from CTGCTATCGA ased on manual check but is fixed automatically by Filter 1
# 'GTGGACGGGA' is derived from GTGGAGCCTC ased on manual check but is fixed automatically by Filter 1
# 'CGACTCGGTG' is derived from CATTGGAGGT
# 'AGTCCAGACC' almost certainly derived from AGTCTGCCTC
# 'GAATTTAAAT' most likely is derived from GATACCCCCA
# 'GATACTTAAC' most likely is derived from GATACCCCCA
# 'GTGGAGCTAG' has a massive inversion in its sequence, extending from near spacer's beginning to near scaffold's end and is likely derived from GTGGAGCCTC.
# 'CGTATGTTTC' is possibly from CGTAGGGCCC
# 'ACACCGGTGT' is not spurious, but I cannot determine which barcode it is derived from. However, since it is only seen in one sample, it shouldn't alter the results significantly.
# 'ACCTCTAAAT' is derived from CGTAGGGCCC but a deletion has remove all the identifier.
# 'CCAGAACACC' is derived from CCCAAAACAC but a deletion has remove almost all the identifier.
# 'CCTGCAGGAA' seems to be derived from 'AGCACTGTAC' based on match on the 3' of the spacer region but this is, at best, at guess. No other identifiers with sequence similarity to this identifier were present inthe sample where it is seen.
all_barcodes -> all_barcodes_prefilter3
all_pairs -> all_pairs_prefilter3
allspacers_bybarcode -> allspacers_bybarcode_prefilter3
alldata_bysample  -> alldata_bysample_prefilter3
alldata_bybarcode_bysample -> alldata_bybarcode_bysample_prefilter3
hgRNA_length -> hgRNA_length_prefilter3
### correct the manually curated truncated barcodes in all loaded data
trunc_barcodes <- c('CGACTCGGTG', 'AGTCCAGACC', 'GAATTTAAAT', 'GATACTTAAC', 'GTGGAGCTAG', 'CGTATGTTTC', 'ACCTCTAAAT', 'CCAGAACACC', 'ATGTAATCCA', 'CCTGCAGGAA')
trunc_barcodes_refs <- c('CATTGGAGGT', 'AGTCTGCCTC', 'GATACCCCCA', 'GATACCCCCA', 'GTGGAGCCTC', 'CGTAGGGCCC', 'CGTAGGGCCC', 'CCCAAAACAC', 'CCCAAAACAC', 'AGCACTGTAC')
for(i in 1:length(trunc_barcodes)) {
bc <- reference_bc <- NULL
bc <- trunc_barcodes[i]
reference_bc <- trunc_barcodes_refs[i]
### correct the barcode in all loaded data
print(paste("truncated barcode MANUAL correction (Filter 3):", bc, reference_bc))
all_barcodes <- all_barcodes[-which(all_barcodes == bc)]
for (pos in grep(bc, all_pairs)) { all_pairs[pos] <- paste(reference_bc, strsplit(all_pairs[pos], split = "-")[[1]][2] , sep = "-") }
allspacers_bybarcode[[reference_bc]] <- sort(append(allspacers_bybarcode[[reference_bc]], allspacers_bybarcode[[bc]]))
allspacers_bybarcode[[bc]] <- NULL
hgRNA_length <- hgRNA_length[-which(names(hgRNA_length) == bc)]
for(sampl in names(alldata_bybarcode_bysample[[bc]])) {
alldata_bysample[[sampl]][which(alldata_bysample[[sampl]][,1] == bc),1] <- reference_bc
alldata_bysample[[sampl]] <- alldata_bysample[[sampl]][order(alldata_bysample[[sampl]]$V1),]
alldata_bybarcode_bysample[[bc]][[sampl]][,1] <- reference_bc
alldata_bybarcode_bysample[[bc]][[sampl]][,ncol(alldata_bybarcode_bysample[[bc]][[sampl]])+1] <- bc
if(!is.null(alldata_bybarcode_bysample[[reference_bc]][[sampl]])) {
alldata_bybarcode_bysample[[reference_bc]][[sampl]][,ncol(alldata_bybarcode_bysample[[reference_bc]][[sampl]])+1] <- reference_bc
if ( ncol(alldata_bybarcode_bysample[[reference_bc]][[sampl]]) > ncol(alldata_bybarcode_bysample[[bc]][[sampl]]) ) {alldata_bybarcode_bysample[[bc]][[sampl]][,ncol(alldata_bybarcode_bysample[[bc]][[sampl]])+1] <- reference_bc}
alldata_bybarcode_bysample[[reference_bc]][[sampl]] <- rbind(alldata_bybarcode_bysample[[reference_bc]][[sampl]], alldata_bybarcode_bysample[[bc]][[sampl]])        # For these samples the fifth column will be the original barcode
} else {
alldata_bybarcode_bysample[[reference_bc]][[sampl]] <- alldata_bybarcode_bysample[[bc]][[sampl]]
}
alldata_bybarcode_bysample[[bc]][[sampl]] <- NULL
alldata_bybarcode_bysample[[reference_bc]][[sampl]] <- alldata_bybarcode_bysample[[reference_bc]][[sampl]][order(alldata_bybarcode_bysample[[reference_bc]][[sampl]]$V3, decreasing = TRUE),]
alldata_bybarcode_bysample[[reference_bc]][[sampl]][,4] <-alldata_bybarcode_bysample[[reference_bc]][[sampl]][,3]/sum(alldata_bybarcode_bysample[[reference_bc]][[sampl]][,3]) * 100
}
}
}
ext <- NULL;
for(sampl in names(alldata_bysample))  {
temp <- length(which(!unique(alldata_bysample[[sampl]][,1]) %in% alldata_bysample[[parent]][,1]));
if (temp >0) {print(paste(sampl, temp, unique(alldata_bysample[[sampl]][,1])[which(!unique(alldata_bysample[[sampl]][,1]) %in% alldata_bysample[[parent]][,1])], sep = ":   "))}
ext <- append(ext, temp)
}
names(ext) <- names(alldata_bysample)
sample_basenames <- unique(unlist(lapply(lapply(strsplit(samplenames_forthis, "-"), "[", 1:3), paste, collapse = "-")))
# This code does not work on P21 samples
#If a sample has replicates, as indicated by them having the same name, this code combines those replicates by integrating their reads together and reconstructing the alldata_bysample and alldata_bybarcode_bysample lists
all_barcodes -> all_barcodes_prefilter4
all_pairs -> all_pairs_prefilter4
allspacers_bybarcode -> allspacers_bybarcode_prefilter4
alldata_bysample  -> alldata_bysample_prefilter4
alldata_bybarcode_bysample -> alldata_bybarcode_bysample_prefilter4
hgRNA_length -> hgRNA_length_prefilter4
samplenames_forthis <- names(alldata_bysample)
samplenames_forthis <- samplenames_forthis[-grep("P21", samplenames_forthis)]
samplenames_forthis <- samplenames_forthis[-grep("parent", samplenames_forthis)]
sample_basenames <- unique(unlist(lapply(lapply(strsplit(samplenames_forthis, "-"), "[", 1:3), paste, collapse = "-")))
for(basename in sample_basenames) {
if (length(grep(basename, names(alldata_bysample))) > 1) {
replicates <- names(alldata_bysample)[grep(basename, names(alldata_bysample))]
sample_name <- NULL; sample_name <- paste(basename, "-From", length(replicates), "reps", sep = "")
pairs <- alldata_bysample[[replicates[1]]];
for(repl in replicates[2:length(replicates)]) {
pairs <- rbind(pairs, alldata_bysample[[repl]])
}
pairs <- aggregate(formula = V3 ~ V1+V2, data = pairs, FUN = sum)
pairs <- pairs[order(pairs$V1, -pairs$V3),]
pairs[,4] <- NA
for(bc in levels(as.factor(as.vector(pairs[,1])))) {
pairs[,4][pairs[,1] == bc] <- round(pairs[,3][pairs[,1] == bc]/(sum(pairs[,3][pairs[,1] == bc]))*100, digits = 2)
alldata_bybarcode_bysample[[bc]][[sample_name]] <- subset(pairs, V1 == bc)
for(repl in replicates) {alldata_bybarcode_bysample[[bc]][[repl]] <- NULL}
}
pairs$V5 <- NA; pairs$V5 <- pairs[,3]/sum(pairs[,3])*100
alldata_bysample[[sample_name]] <- pairs;
for(repl in replicates) {alldata_bysample[[repl]] <- NULL}
}
}
length(names(alldata_bysample))
length(names(alldata_bysample_prefilter4))
sample_basenames
samplenames_forthis <- names(alldata_bysample)
samplenames_forthis <- samplenames_forthis[-grep("P21", samplenames_forthis)]
samplenames_forthis <- samplenames_forthis[-grep("parent", samplenames_forthis)]
sample_basenames <- unique(unlist(lapply(lapply(strsplit(samplenames_forthis, "-"), "[", 1:3), paste, collapse = "-")))
samplenames_forthis
samplenames_forthis <- names(alldata_bysample)
samplenames_forthis
samplenames_forthis <- samplenames_forthis[-grep("P21", samplenames_forthis)]
samplenames_forthis
samplenames_forthis <- names(alldata_bysample)
samplenames_forthis <- samplenames_forthis[-grep("parent", samplenames_forthis)]
samplenames_forthis
sample_basenames <- unique(unlist(lapply(lapply(strsplit(samplenames_forthis, "-"), "[", 1:3), paste, collapse = "-")))
sample_basenames
sample_basenames <- unique(unlist(lapply(lapply(strsplit(samplenames_forthis, "-"), "[", 1:4), paste, collapse = "-")))
sample_basenames
for(basename in sample_basenames) {
if (length(grep(basename, names(alldata_bysample))) > 1) {
replicates <- names(alldata_bysample)[grep(basename, names(alldata_bysample))]
sample_name <- NULL; sample_name <- paste(basename, "-From", length(replicates), "reps", sep = "")
pairs <- alldata_bysample[[replicates[1]]];
for(repl in replicates[2:length(replicates)]) {
pairs <- rbind(pairs, alldata_bysample[[repl]])
}
pairs <- aggregate(formula = V3 ~ V1+V2, data = pairs, FUN = sum)
pairs <- pairs[order(pairs$V1, -pairs$V3),]
pairs[,4] <- NA
for(bc in levels(as.factor(as.vector(pairs[,1])))) {
pairs[,4][pairs[,1] == bc] <- round(pairs[,3][pairs[,1] == bc]/(sum(pairs[,3][pairs[,1] == bc]))*100, digits = 2)
alldata_bybarcode_bysample[[bc]][[sample_name]] <- subset(pairs, V1 == bc)
for(repl in replicates) {alldata_bybarcode_bysample[[bc]][[repl]] <- NULL}
}
pairs$V5 <- NA; pairs$V5 <- pairs[,3]/sum(pairs[,3])*100
alldata_bysample[[sample_name]] <- pairs;
for(repl in replicates) {alldata_bysample[[repl]] <- NULL}
}
}
length(names(alldata_bysample))
names(alldata_bybarcode_bysample)
names(alldata_bysample)
samplenames_forthis <- names(alldata_bysample)
sample_basenames <- unique(unlist(lapply(lapply(strsplit(samplenames_forthis, "-"), "[", 1:4), paste, collapse = "-")))
sample_basenames
all_pairs <- all_pairs_prefilter4
allspacers_bybarcode <- allspacers_bybarcode_prefilter4
alldata_bysample  <- alldata_bysample_prefilter4
alldata_bybarcode_bysample <- alldata_bybarcode_bysample_prefilter4
hgRNA_length <- hgRNA_length_prefilter4
samplenames_forthis <- names(alldata_bysample)
sample_basenames <- unique(unlist(lapply(lapply(strsplit(samplenames_forthis, "-"), "[", 1:4), paste, collapse = "-")))
sample_basenames
names(alldata_bysample)
length(names(alldata_bysample))
for(basename in sample_basenames) {
if (length(grep(basename, names(alldata_bysample))) > 1) {
replicates <- names(alldata_bysample)[grep(basename, names(alldata_bysample))]
sample_name <- NULL; sample_name <- paste(basename, "-From", length(replicates), "reps", sep = "")
pairs <- alldata_bysample[[replicates[1]]];
for(repl in replicates[2:length(replicates)]) {
pairs <- rbind(pairs, alldata_bysample[[repl]])
}
pairs <- aggregate(formula = V3 ~ V1+V2, data = pairs, FUN = sum)
pairs <- pairs[order(pairs$V1, -pairs$V3),]
pairs[,4] <- NA
for(bc in levels(as.factor(as.vector(pairs[,1])))) {
pairs[,4][pairs[,1] == bc] <- round(pairs[,3][pairs[,1] == bc]/(sum(pairs[,3][pairs[,1] == bc]))*100, digits = 2)
alldata_bybarcode_bysample[[bc]][[sample_name]] <- subset(pairs, V1 == bc)
for(repl in replicates) {alldata_bybarcode_bysample[[bc]][[repl]] <- NULL}
}
pairs$V5 <- NA; pairs$V5 <- pairs[,3]/sum(pairs[,3])*100
alldata_bysample[[sample_name]] <- pairs;
for(repl in replicates) {alldata_bysample[[repl]] <- NULL}
}
}
length(names(alldata_bysample))
names(alldata_bysample)
all_pairs <- all_pairs_prefilter4
allspacers_bybarcode <- allspacers_bybarcode_prefilter4
alldata_bysample  <- alldata_bysample_prefilter4
alldata_bybarcode_bysample <- alldata_bybarcode_bysample_prefilter4
hgRNA_length <- hgRNA_length_prefilter4
samplenames_forthis <- names(alldata_bysample)
samplenames_forthis <- samplenames_forthis[-grep("empty", samplenames_forthis)]
sample_basenames <- unique(unlist(lapply(lapply(strsplit(samplenames_forthis, "-"), "[", 1:4), paste, collapse = "-")))
alldata_bysample[["170905-emb3-w8-empty-rep1"]]
